#version 150 core
#define PI 3.1415926538
layout(triangles, equal_spacing, ccw) in;

in vec4 tcs_pos[];
in vec3 tcs_vn[];
in vec4 tcs_obj_space_pos[];
in vec2 tcs_textcoord[];

out vec4 tes_pos;
out vec3 tes_vn;
out vec4 tes_obj_space_pos;


uniform mat4 model;					//the model matrix defined for the current vertex.
uniform mat4 view;					//the viewing matrix that change vertex from world coordinate system to camera coordinate system.
uniform mat4 camera;				//the matrix defined for camera transformation.
uniform mat4 proj;					//the matrix defined for projection (perspective or orthogonal).


vec2 interpolate(vec3 bary, vec2 v0, vec2 v1, vec2 v2) {
	return bary.x * v0 + bary.y * v1 + bary.z * v2;
}
vec3 interpolate(vec3 bary, vec3 v0, vec3 v1, vec3 v2) {
	return bary.x * v0 + bary.y * v1 + bary.z * v2;
}
vec4 interpolate(vec3 bary, vec4 v0, vec4 v1, vec4 v2) {
	return bary.x * v0 + bary.y * v1 + bary.z * v2;
}


//////////////////////////////////////////////


void main()
{
	vec4 tmp = interpolate(gl_TessCoord, tcs_pos[0], tcs_pos[1], tcs_pos[2]);
	tes_obj_space_pos = interpolate(gl_TessCoord, tcs_obj_space_pos[0], tcs_obj_space_pos[1], tcs_obj_space_pos[2]);
	tes_vn = interpolate(gl_TessCoord, tcs_vn[0], tcs_vn[1], tcs_vn[2]);

	gl_Position = tmp;
	tes_pos = tmp;
	
}